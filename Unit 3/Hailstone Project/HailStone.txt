Hailstone.java:
--------------
public class Hailstone 
{


/** Returns the length of a hailstone sequence that starts with n,

* as described in part (a).

* Precondition: n > 0

*/

public static int hailstoneLength(int n)
{ 
    int length = 0;
    while(n>0){
        if(n==1){
            length++;
            n--;
        }
        else if(n%2==0){
            n = n/2;
            length++;
        }
        else if(n%2!=0){
            n = 3*n+1;
            length++;
        }
    }
    
    return length;
    
}


  /** Returns true if the hailstone sequence that starts with n is considered long

* and false otherwise, as described in part (b).

* Precondition: n > 0

*/

public static boolean isLongSeq(int n)

{ 
    if(hailstoneLength(n)>n)
        return true;
    
    else
        return false;
}


  /** Returns the proportion of the first n hailstone sequences that are considered long,

* as described in part (c).

* Precondition: n > 0

*/

public static double propLong(int n)

{ 
    int numerator = 0;
    double denominator = n;
    /* to be implemented in part (c) */
     for(int x=n; x>0; x--){
         if(isLongSeq(x)){
             numerator++;
         }
     }
     
     return numerator/denominator;
}


  // There may be instance variables, constructors, and methods not shown.
  
 

}

ConsoleProgram.java:
-------------------
import java.util.*;
public class ConsoleProgram{

private Scanner scanner;

public static void main(String[] args){
// Assume the class name is passed in as the first argument.

if(args.length == 0){
System.out.println("Please provide the name of the main class as an argument.");
return;
}

String mainClassName = args[0];

try{
Class mainClass = Class.forName(mainClassName);
Object obj = mainClass.newInstance();
ConsoleProgram program = (ConsoleProgram)obj;
program.run();
} catch (IllegalAccessException ex) {
System.out.println("Error in program. Make sure you extend ConsoleProgram");
} catch (InstantiationException ex) {
System.out.println("Error in program. Make sure you extend ConsoleProgram");
} catch (ClassNotFoundException ex) {
System.out.println("Error in program. Make sure you extend ConsoleProgram");
}
}

public void run(){
/* Overridden by subclass */
}

public ConsoleProgram(){
scanner = new Scanner(System.in);

}

public String readLine(String prompt){
System.out.print(prompt);
return scanner.nextLine();
}

public boolean readBoolean(String prompt){

while(true){
String input = readLine(prompt);

if(input.equalsIgnoreCase("true")){
return true;
}

if(input.equalsIgnoreCase("false")){
return false;
}
}
}

public double readDouble(String prompt){

while(true){
String input = readLine(prompt);
try {
double n = Double.valueOf(input).doubleValue();
return n;
} catch (NumberFormatException e){

}
}
}

// Allow the user to get an integer.
public int readInt(String prompt){

while(true){
String input = readLine(prompt);
try {
int n = Integer.parseInt(input);
return n;
} catch (NumberFormatException e){

}
}
}

/**
* Allows us to use a shorthand version for System.out.println()
*/
public void println() {
System.out.println();
}

/**
* Allows us to use a shorthand version for System.out.println(String s)
*/
public void println(String s) {
System.out.println(s);
}

/**
* Allows us to use a shorthand version for System.out.println(boolean x)
*/
public void println(boolean x) {
System.out.println(x);
}

/**
* Allows us to use a shorthand version for System.out.println(char x)
*/
public void println(char x) {
System.out.println(x);
}

/**
* Allows us to use a shorthand version for System.out.println(char[] x)
*/
public void println(char[] x) {
System.out.println(x);
}

/**
* Allows us to use a shorthand version for System.out.println(int x)
*/
public void println(int x) {
System.out.println(x);
}

/**
* Allows us to use a shorthand version for System.out.println(long x)
*/
public void println(long x) {
System.out.println(x);
}

/**
* Allows us to use a shorthand version for System.out.println(float x)
*/
public void println(float x) {
System.out.println(x);
}

/**
* Allows us to use a shorthand version for System.out.println(double x)
*/
public void println(double x) {
System.out.println(x);
}

/**
* Allows us to use a shorthand version for System.out.println(Object o)
*/
public void println(Object o) {
System.out.println(o);
}

/**
* Allows us to use a shorthand version for System.out.print()
*/
public void print() {
System.out.print("");
}

/**
* Allows us to use a shorthand version for System.out.print(String s)
*/
public void print(String s) {
System.out.print(s);
}

/**
* Allows us to use a shorthand version for System.out.print(boolean x)
*/
public void print(boolean x) {
System.out.print(x);
}

/**
* Allows us to use a shorthand version for System.out.print(char x)
*/
public void print(char x) {
System.out.print(x);
}

/**
* Allows us to use a shorthand version for System.out.print(char[] x)
*/
public void print(char[] x) {
System.out.print(x);
}

/**
* Allows us to use a shorthand version for System.out.print(int x)
*/
public void print(int x) {
System.out.print(x);
}

/**
* Allows us to use a shorthand version for System.out.print(long x)
*/
public void print(long x) {
System.out.print(x);
}

/**
* Allows us to use a shorthand version for System.out.print(float x)
*/
public void print(float x) {
System.out.print(x);
}

/**
* Allows us to use a shorthand version for System.out.print(double x)
*/
public void print(double x) {
System.out.print(x);
}

/**
* Allows us to use a shorthand version for System.out.print(Object o)
*/
public void print(Object o) {
System.out.print(o);
}
}


MyProgram.java:
--------------
public class MyProgram extends ConsoleProgram
{
    public void run()
    {
        
        /****************************************************
         *  You may want to modify this object to add more test cases
         * **************************************************/
         
        int number = 0;
        Hailstone g = new Hailstone();
       
        number = readInt("Enter a number ");
        
        System.out.println("Hailstone Length = " + g.hailstoneLength(number));
        System.out.println("Is Hailstone Long? - " + g.isLongSeq(number));
        System.out.println("Proportion of Hailstone Long = " + g.propLong(number));
        
    }
}

ConsoleProgram.java:
----
import java.util.*;

public class ConsoleProgram{

    private Scanner scanner;

    public static void main(String[] args){
        // Assume the class name is passed in as the first argument.

        if(args.length == 0){
            System.out.println("Please provide the name of the main class as an argument.");
            return;
        }

        String mainClassName = args[0];

        try{
            Class mainClass = Class.forName(mainClassName);
            Object obj = mainClass.newInstance();
            ConsoleProgram program = (ConsoleProgram)obj;
            program.run();
        } catch (IllegalAccessException ex) {
            System.out.println("Error in program. Make sure you extend ConsoleProgram");
        } catch (InstantiationException ex) {
            System.out.println("Error in program. Make sure you extend ConsoleProgram");
        } catch (ClassNotFoundException ex) {
            System.out.println("Error in program. Make sure you extend ConsoleProgram");
        }
    }

    public void run(){
        /* Overridden by subclass */
    }

    public ConsoleProgram(){
        scanner = new Scanner(System.in);

    }

    public String readLine(String prompt){
        System.out.print(prompt);
        return scanner.nextLine();
    }

    public boolean readBoolean(String prompt){

        while(true){
            String input = readLine(prompt);

            if(input.equalsIgnoreCase("true")){
                return true;
            }

            if(input.equalsIgnoreCase("false")){
                return false;
            }
        }
    }

    public double readDouble(String prompt){

        while(true){
            String input = readLine(prompt);
            try {
                double n = Double.valueOf(input).doubleValue();
                return n;
            } catch (NumberFormatException e){

            }
        }
    }

    // Allow the user to get an integer.
    public int readInt(String prompt){

        while(true){
            String input = readLine(prompt);
            try {
                int n = Integer.parseInt(input);
                return n;
            } catch (NumberFormatException e){

            }
        }
    }

    /**
     * Allows us to use a shorthand version for System.out.println()
     */
    public void println() {
        System.out.println();
    }

    /**
     * Allows us to use a shorthand version for System.out.println(String s)
     */
    public void println(String s) {
        System.out.println(s);
    }

    /**
     * Allows us to use a shorthand version for System.out.println(boolean x)
     */
    public void println(boolean x) {
        System.out.println(x);
    }

    /**
     * Allows us to use a shorthand version for System.out.println(char x)
     */
    public void println(char x) {
        System.out.println(x);
    }

    /**
     * Allows us to use a shorthand version for System.out.println(char[] x)
     */
    public void println(char[] x) {
        System.out.println(x);
    }

    /**
     * Allows us to use a shorthand version for System.out.println(int x)
     */
    public void println(int x) {
        System.out.println(x);
    }

    /**
     * Allows us to use a shorthand version for System.out.println(long x)
     */
    public void println(long x) {
        System.out.println(x);
    }

    /**
     * Allows us to use a shorthand version for System.out.println(float x)
     */
    public void println(float x) {
        System.out.println(x);
    }

    /**
     * Allows us to use a shorthand version for System.out.println(double x)
     */
    public void println(double x) {
        System.out.println(x);
    }

    /**
     * Allows us to use a shorthand version for System.out.println(Object o)
     */
    public void println(Object o) {
        System.out.println(o);
    }

    /**
     * Allows us to use a shorthand version for System.out.print()
     */
    public void print() {
        System.out.print("");
    }

    /**
     * Allows us to use a shorthand version for System.out.print(String s)
     */
    public void print(String s) {
        System.out.print(s);
    }

    /**
     * Allows us to use a shorthand version for System.out.print(boolean x)
     */
    public void print(boolean x) {
        System.out.print(x);
    }

    /**
     * Allows us to use a shorthand version for System.out.print(char x)
     */
    public void print(char x) {
        System.out.print(x);
    }

    /**
     * Allows us to use a shorthand version for System.out.print(char[] x)
     */
    public void print(char[] x) {
        System.out.print(x);
    }

    /**
     * Allows us to use a shorthand version for System.out.print(int x)
     */
    public void print(int x) {
        System.out.print(x);
    }

    /**
     * Allows us to use a shorthand version for System.out.print(long x)
     */
    public void print(long x) {
        System.out.print(x);
    }

    /**
     * Allows us to use a shorthand version for System.out.print(float x)
     */
    public void print(float x) {
        System.out.print(x);
    }

    /**
     * Allows us to use a shorthand version for System.out.print(double x)
     */
    public void print(double x) {
        System.out.print(x);
    }

    /**
     * Allows us to use a shorthand version for System.out.print(Object o)
     */
    public void print(Object o) {
        System.out.print(o);
    }
}


